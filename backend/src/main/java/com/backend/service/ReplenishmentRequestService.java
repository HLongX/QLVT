package com.backend.service;

import com.backend.dto.ReplenishmentRequestDTO;
import com.backend.entity.ReplenishmentRequest;
import com.backend.entity.ReplenishmentRequestItem;
import com.backend.repository.ReplenishmentRequestRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;

@Service
public class ReplenishmentRequestService {

    private final ReplenishmentRequestRepository requestRepository;

    public ReplenishmentRequestService(ReplenishmentRequestRepository requestRepository) {
        this.requestRepository = requestRepository;
    }

    /**
     * üìù T·∫°o m·ªôt phi·∫øu ƒë·ªÅ ngh·ªã m·ªõi t·ª´ DTO g·ª≠i l√™n t·ª´ FE
     */
    @Transactional
    public ReplenishmentRequest create(ReplenishmentRequestDTO dto) {
        ReplenishmentRequest request = new ReplenishmentRequest();
        request.setNote(dto.getNote());
        request.setRequesterId(1); // T·∫°m th·ªùi g√°n c·ª©ng, sau n√†y c√≥ th·ªÉ l·∫•y t·ª´ user ƒëƒÉng nh·∫≠p

        // T·∫°o m√£ phi·∫øu d·∫°ng PDN-YYYY-000X
        String code = String.format("PDN-%d-%04d",
                LocalDate.now().getYear(),
                requestRepository.count() + 1);
        request.setCode(code);

        // Th√™m c√°c m·∫∑t h√†ng chi ti·∫øt v√†o phi·∫øu
        dto.getItems().forEach(i -> {
            ReplenishmentRequestItem item = new ReplenishmentRequestItem();
            item.setProductId(i.getProductId());
            item.setProductName(i.getProductName());
            item.setQuantity(i.getQuantity());
            item.setUnit(i.getUnit());
            item.setSource(i.getSource());
            request.addItem(item);
        });

        // L∆∞u to√†n b·ªô phi·∫øu (cascade s·∫Ω t·ª± l∆∞u items)
        return requestRepository.save(request);
    }

    /**
     * üìã L·∫•y danh s√°ch t·∫•t c·∫£ phi·∫øu ƒë·ªÅ ngh·ªã
     */
    public List<ReplenishmentRequest> findAll() {
        return requestRepository.findAll();
    }

    /**
     * ‚úÖ Duy·ªát m·ªôt phi·∫øu theo ID
     */
    @Transactional
    public ReplenishmentRequest approve(Long id) {
        ReplenishmentRequest req = requestRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y phi·∫øu ID=" + id));
        req.setStatus(ReplenishmentRequest.Status.APPROVED);
        return requestRepository.save(req);
    }

    /**
     * ‚ùå T·ª´ ch·ªëi m·ªôt phi·∫øu theo ID
     */
    @Transactional
    public ReplenishmentRequest reject(Long id) {
        ReplenishmentRequest req = requestRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y phi·∫øu ID=" + id));
        req.setStatus(ReplenishmentRequest.Status.REJECTED);
        return requestRepository.save(req);
    }
}
